plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

tasks.named('test') {
    useJUnitPlatform()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // bcrypt
    implementation 'at.favre.lib:bcrypt:0.10.2'

    // jwt
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // QueryDSL 의존성
    // 이 라이브러리가 더이상 유지보수x
    // 우리나라만 많이 씀
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // Spring Security 의존성
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly   'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly   'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // 테스트 -> 이 의존성 없으면 WithSecurityContextFactory 오류
    testImplementation 'org.springframework.security:spring-security-test'
}


// QueryDSL 코드 생성 경로 설정
// [ Q 클래스 생성 + IDE 에서 소스로 인식 ]
// 이게 없으면 Q 클래스 생성이 안됨 (오류)
// -> 경로를 지정해주지 않으면 엉뚱한 위치에 생기거나, IDE q에서 인식 불가
// def querydslDir : Q 클래스가 생성될 디렉토리 경로 지정
// 취소선? IDE가 $buildDir를 구식 방식으로 인식했기 때문
// -> def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile
// 로 변경 시 취소선 없음
def querydslDir = "$buildDir/generated/querydsl"

// sourceSets : IDE(IntelliJ)에서 이 경로를 소스 폴더로 인식
sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

// tasks.withType(JavaCompile) : 컴파일 시 생성된 Q 클래스가 위 경로에 들어가도록 지정
// 취소선? Gradle 7.3 이후로 deprecated (사용 되지만 앞으로 사라질 예정) 표시
tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)}